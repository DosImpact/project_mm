# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Answer {
  answer: [String!]!
  isMultiple: Boolean!
  isNumber: Boolean!
}

input AnswerInputType {
  answer: [String!]!
  isMultiple: Boolean!
  isNumber: Boolean!
}

input CheckProblem01Input {
  answer: [String!]!
  id: Int!
}

type CheckProblem01Output {
  error: String
  isCorrect: Boolean
  ok: Boolean!
}

input CreateProblem01Input {
  answer: AnswerInputType!
  subTitle: String
  title: String!
}

type CreateProblem01Output {
  error: String
  ok: Boolean!
}

input CreateProblem02Input {
  email: String!
  password: String!
  role: P02UserRole!
}

type CreateProblem02Output {
  error: String
  ok: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteProblem01Input {
  id: Float!
}

type DeleteProblem01Output {
  error: String
  ok: Boolean!
}

input DeleteProblem02Input {
  id: Int!
}

type DeleteProblem02Output {
  error: String
  ok: Boolean!
}

input LoginProblem02Input {
  email: String!
  password: String!
}

type LoginProblem02Output {
  error: String
  ok: Boolean!
  token: String
}

type Mutation {
  DeleteProblem01(deleteProblem01Input: DeleteProblem01Input!): DeleteProblem01Output!
  DeleteProblem02(input: DeleteProblem02Input!): DeleteProblem02Output!
  LoginProblem02(input: LoginProblem02Input!): LoginProblem02Output!
  UpdateProblem01(updateProblem01Input: UpdateProblem01Input!): UpdateProblem01Output!
  UpdateProblem02(input: UpdateProblem02Input!): UpdateProblem02Output!
  checkProblem01(checkProblem01Input: CheckProblem01Input!): CheckProblem01Output!
  createProblem01(createProblem01Input: CreateProblem01Input!): CreateProblem01Output!
  createProblem02(input: CreateProblem02Input!): CreateProblem02Output!
}

enum P02UserRole {
  admin
  student
  teacher
}

type Problem01 {
  answer: Answer!
  createdAt: DateTime!
  deletedAt: DateTime!
  id: Float!
  subTitle: String
  title: String!
  totalProblems01: Int!
  updatedAt: DateTime!
  v: Float!
}

input Problem01Input {
  id: Int!
}

type Problem01Output {
  error: String
  ok: Boolean!
  problem01: Problem01
}

type Problem02 {
  createdAt: DateTime!
  deletedAt: DateTime!
  email: String!
  id: Float!
  password: String!
  role: P02UserRole!
  updatedAt: DateTime!
  v: Float!
}

input Problem02Input {
  id: Int!
}

type Problem02Output {
  error: String
  ok: Boolean!
  problem02: Problem02
}

type Problems01Output {
  error: String
  ok: Boolean!
  problems01: [Problem01!]
}

type Problems02Output {
  error: String
  ok: Boolean!
  problems02: [Problem02!]!
}

type Query {
  deluser: String!
  getProblem01(problem01Input: Problem01Input!): Problem01Output!
  getProblem02(input: Problem02Input!): Problem02Output!
  getProblems01: Problems01Output!
  getProblems02: Problems02Output!
  me: String!
}

input UpdateProblem01Input {
  answer: AnswerInputType
  id: Float!
  subTitle: String
  title: String
}

type UpdateProblem01Output {
  error: String
  ok: Boolean!
  problem01: Problem01
}

input UpdateProblem02Input {
  email: String
  id: Int!
  password: String
  role: P02UserRole
}

type UpdateProblem02Output {
  error: String
  ok: Boolean!
}
